{
  "title": "Valid Palindrome",
  "slug": "valid-palindrome",
  "leetcodeId": "#125",
  "category": ["String", "Two Pointer"],
  "problemStatement": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string s, return true if it is a palindrome, or false otherwise.",
  "examples": [
    {
      "input": "A man, a plan, a canal: Panama",
      "output": "true",
      "explanation": "After cleaning and lowering the string, we get 'amanaplanacanalpanama', which is a palindrome."
    },
    {
      "input": "race a car",
      "output": "false",
      "explanation": "After cleaning and lowering the string, we get 'raceacar', which is not a palindrome."
    },
    {
      "input": " ",
      "output": "true",
      "explanation": "After cleaning, the string is empty. An empty string is considered a valid palindrome."
    }
  ],
  "approach": "We need to check if a string is a palindrome, ignoring non-alphanumeric characters and case.\n\nApproach 1 â€“ Brute Force:**\n- Filter the string to keep only alphanumeric characters.\n- Convert the string to lowercase.\n- Use two pointers to compare characters from the start and end.\n\nApproach 2 â€“ Optimized Two Pointer (In-place):**\n- Use two pointers from the start and end.\n- Skip non-alphanumeric characters.\n- Compare characters in lowercase on the fly.\n- This avoids building a new array and reduces space usage.",
  "code": "// ðŸ”¹ Optimized In-Place Two Pointer Approach\nvar isPalindrome = function (s) {\n  let start = 0;\n  let end = s.length - 1;\n\n  while (start < end) {\n    while (start < end && !isAlphaNumeric(s[start])) start++;\n    while (start < end && !isAlphaNumeric(s[end])) end--;\n\n    if (s[start].toLowerCase() !== s[end].toLowerCase()) {\n      return false;\n    }\n\n    start++;\n    end--;\n  }\n\n  return true;\n};\n\nfunction isAlphaNumeric(c) {\n  let code = c.charCodeAt(0);\n  return (\n    (code >= 48 && code <= 57) || // 0-9\n    (code >= 65 && code <= 90) || // A-Z\n    (code >= 97 && code <= 122)   // a-z\n  );\n}",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)",
  "leetcodeLink": "https://leetcode.com/problems/valid-palindrome/",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQS2AJ3O2REWRqTlrI2iCClJAZmcYH672POTf-xA3NaKCRA?em=2&amp;wdAr=1.7777777777777777",
  "videoLink": "iq2VnyxoQRs"
}
