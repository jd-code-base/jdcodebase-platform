{
  "title": "Valid Palindrome",
  "slug": "valid-palindrome",
  "leetcodeId": "#125",
  "category": ["String", "Two Pointer"],
  "problemStatement": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string s, return true if it is a palindrome, or false otherwise.",
  "examples": [
    {
      "input": "A man, a plan, a canal: Panama",
      "output": "true",
      "explanation": "After cleaning and lowering the string, we get 'amanaplanacanalpanama', which is a palindrome."
    },
    {
      "input": "race a car",
      "output": "false",
      "explanation": "After cleaning and lowering the string, we get 'raceacar', which is not a palindrome."
    },
    {
      "input": " ",
      "output": "true",
      "explanation": "After cleaning, the string is empty. An empty string is considered a valid palindrome."
    }
  ],
  "approach": [
    {
      "title": "Approach 1: Brute Force",
      "steps": [
        "Filter the string to keep only alphanumeric characters.",
        "Convert the string to lowercase.",
        "Use two pointers to compare characters from the start and end.",
        "If all pairs match, return true. Else, return false."
      ],
      "code": "// ðŸ”¹ Brute Force\nvar isPalindrome = function(s) {\n  let cleaned = s.toLowerCase().replace(/[^a-z0-9]/g, '');\n  let start = 0;\n  let end = cleaned.length - 1;\n  while (start < end) {\n    if (cleaned[start] !== cleaned[end]) return false;\n    start++;\n    end--;\n  }\n  return true;\n};"
    },
    {
      "title": "Approach 2: Optimized Two Pointer (In-place)",
      "steps": [
        "Use two pointers from the start and end.",
        "Skip non-alphanumeric characters.",
        "Compare characters in lowercase on the fly.",
        "If mismatch found, return false.",
        "If loop completes, return true."
      ],
      "code": "// ðŸ”¹ Optimized In-Place Two Pointer Approach\nvar isPalindrome = function (s) {\n  let start = 0;\n  let end = s.length - 1;\n\n  while (start < end) {\n    while (start < end && !isAlphaNumeric(s[start])) start++;\n    while (start < end && !isAlphaNumeric(s[end])) end--;\n\n    if (s[start].toLowerCase() !== s[end].toLowerCase()) {\n      return false;\n    }\n\n    start++;\n    end--;\n  }\n\n  return true;\n};\n\nfunction isAlphaNumeric(c) {\n  let code = c.charCodeAt(0);\n  return (\n    (code >= 48 && code <= 57) || // 0-9\n    (code >= 65 && code <= 90) || // A-Z\n    (code >= 97 && code <= 122)   // a-z\n  );\n}"
    }
  ],
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)",
  "leetcodeLink": "https://leetcode.com/problems/valid-palindrome/",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQS2AJ3O2REWRqTlrI2iCClJAZmcYH672POTf-xA3NaKCRA?em=2&amp;wdAr=1.7777777777777777",
  "videoLink": "iq2VnyxoQRs"
}
