{
  "title": "Sort Colors",
  "slug": "sort-colors",
  "leetcodeId": "#75",
  "category": ["Array", "Two Pointer", "Sorting"],
  "problemStatement": "Youâ€™re given an array nums with n objects colored red, white, or blue. Your task is to sort them in-place so that objects of the same color are adjacent, and in the order: Red (0), White (1), Blue (2).\n\nðŸ“Œ You must solve it without using any built-in sort function.",
  "examples": [
    {
      "input": "[2, 0, 2, 1, 1, 0]",
      "output": "[0, 0, 1, 1, 2, 2]",
      "explanation": "The array is sorted in-place into grouped colors in the order 0, 1, 2."
    },
    {
      "input": "[2, 0, 1]",
      "output": "[0, 1, 2]",
      "explanation": "Each color is positioned correctly without using built-in sort."
    }
  ],
  "approach": "Counting Sort\nCount the number of 0s, 1s, and 2s in the array. Then, overwrite the original array with those many 0s, 1s, and 2s in order.",
  "code": "var sortColors = function(nums) {\n  let zero = 0, one = 0, two = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) zero++;\n    else if (nums[i] === 1) one++;\n    else two++;\n  }\n\n  let i = 0;\n  while (zero--) nums[i++] = 0;\n  while (one--) nums[i++] = 1;\n  while (two--) nums[i++] = 2;\n\n  return nums;\n};\n\nconsole.log(sortColors([2, 0, 2, 1, 1, 0])); // [0, 0, 1, 1, 2, 2]",
  "timeComplexity": "O(n) â€“ Each element is visited once during counting and once during writing.",
  "spaceComplexity": "O(1) â€“ No extra space used except fixed counters.",
  "leetcodeLink": "https://leetcode.com/problems/sort-colors/",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQSkNHooFkk_ToCT9WbPo6cbAe8O425s-VHVEGaWhlwsYqo?em=2&amp;wdAr=1.7777777777777777",
  "videoLink": "h1W3yaCAZk0"
}
