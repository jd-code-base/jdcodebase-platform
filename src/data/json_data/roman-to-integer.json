{
  "title": "Roman to Integer",
  "slug": "roman-to-integer",
  "leetcodeId": "#13",
  "category": ["String", "Hash Map"],
  "problemStatement": "Given a Roman numeral, convert it to an integer.\n\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol | Value\n-------|------\nI      | 1\nV      | 5\nX      | 10\nL      | 50\nC      | 100\nD      | 500\nM      | 1000\n\nRoman numerals are usually written largest to smallest from left to right. However, in a few special cases, we subtract values â€” such as IV = 4 or IX = 9.\n\nYou are given a string representing a Roman numeral. Convert it to the corresponding integer.",
  "examples": [
    {
      "input": "s = \"III\"",
      "output": "3",
      "explanation": "\"III\" = 1 + 1 + 1 = 3"
    },
    {
      "input": "s = \"LVIII\"",
      "output": "58",
      "explanation": "\"L\" = 50, \"V\" = 5, \"III\" = 3 â†’ Total = 58"
    },
    {
      "input": "s = \"MCMXCIV\"",
      "output": "1994",
      "explanation": "\"M\" = 1000, \"CM\" = 900, \"XC\" = 90, \"IV\" = 4 â†’ Total = 1994"
    }
  ],
  "approach": [
    {
      "title": "Map-Based Iteration with Subtractive Pair Check",
      "steps": [
        "Create a map with values for single Roman symbols and subtractive pairs.",
        "Initialize `intVal = 0` and start iterating over the string with index `i`.",
        "Check if `s[i] + s[i+1]` forms a valid subtractive pair present in the map.",
        "- If yes: add its value and move `i` forward by 2.",
        "- Else: add value of single character `s[i]` and increment `i` by 1.",
        "Repeat until end of string and return the final `intVal`."
      ],
      "code": "// ðŸ”¹ JavaScript Implementation\nvar romanToInt = function (s) {\n  const map = new Map([\n    [\"I\", 1], [\"V\", 5], [\"X\", 10], [\"L\", 50],\n    [\"C\", 100], [\"D\", 500], [\"M\", 1000],\n    [\"IV\", 4], [\"IX\", 9], [\"XL\", 40], [\"XC\", 90],\n    [\"CD\", 400], [\"CM\", 900]\n  ]);\n\n  let intVal = 0;\n  for (let i = 0; i < s.length; ) {\n    if (i + 1 < s.length && map.has(s[i] + s[i + 1])) {\n      intVal += map.get(s[i] + s[i + 1]);\n      i += 2;\n    } else {\n      intVal += map.get(s[i]);\n      i++;\n    }\n  }\n  return intVal;\n};\n\nconsole.log(romanToInt(\"III\"));      // 3\nconsole.log(romanToInt(\"LVIII\"));    // 58\nconsole.log(romanToInt(\"MCMXCIV\"));  // 1994"
    }
  ],
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)",
  "leetcodeLink": "https://leetcode.com/problems/roman-to-integer/",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQTNLq6Wd-iTTaB8IZJkawtjAW93tAX5euF6wsLZfr2JWUs?em=2&amp;wdAr=1.7777777777777777",
  "videoLink": "jtO2AUc_XgQ"
}
