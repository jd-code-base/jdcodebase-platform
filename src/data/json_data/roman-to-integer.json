{
  "title": "Roman to Integer",
  "slug": "roman-to-integer",
  "leetcodeId": "#13",
  "category": ["String", "Hash Map"],
  "problemStatement": "Given a Roman numeral, convert it to an integer.\n\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol | Value\n-------|------\nI      | 1\nV      | 5\nX      | 10\nL      | 50\nC      | 100\nD      | 500\nM      | 1000\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not 'IIII'. Instead, the number four is written as 'IV'. Because the one is before the five we subtract it making four.\n\nThe same principle applies to the number nine, which is written as 'IX'. There are six instances where subtraction is used:\n- I can be placed before V (5) and X (10) to make 4 and 9.\n- X can be placed before L (50) and C (100) to make 40 and 90.\n- C can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.",
  "examples": [
    {
      "input": "s = \"III\"",
      "output": "3",
      "explanation": "\"III\" = 1 + 1 + 1 = 3"
    },
    {
      "input": "s = \"IV\"",
      "output": "4",
      "explanation": "\"IV\" = 5 - 1 = 4"
    },
    {
      "input": "s = \"MCMXCIV\"",
      "output": "1994",
      "explanation": "\"M\" + \"CM\" + \"XC\" + \"IV\" = 1000 + 900 + 90 + 4 = 1994"
    }
  ],
  "approach": [
    {
      "title": "Hash Map + Left-to-Right Pass",
      "steps": [
        "Create a hash map with values for each Roman numeral.",
        "Initialize a total sum to 0.",
        "Iterate through the string from left to right.",
        "- If the current value is less than the next value, subtract the current from total.",
        "- Otherwise, add it to the total.",
        "Return the total as the final integer value."
      ],
      "code": "// ðŸ”¹ JavaScript Solution\nfunction romanToInt(s) {\n  const map = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000\n  };\n\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    const curr = map[s[i]];\n    const next = map[s[i + 1]];\n\n    if (next > curr) {\n      total += next - curr;\n      i++; // skip the next character\n    } else {\n      total += curr;\n    }\n  }\n\n  return total;\n}\n\nconsole.log(romanToInt(\"III\"));       // Output: 3\nconsole.log(romanToInt(\"IV\"));        // Output: 4\nconsole.log(romanToInt(\"MCMXCIV\"));   // Output: 1994"
    }
  ],
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)",
  "leetcodeLink": "https://leetcode.com/problems/roman-to-integer/",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQTNLq6Wd-iTTaB8IZJkawtjAW93tAX5euF6wsLZfr2JWUs?em=2&amp;wdAr=1.7777777777777777",
  "videoLink": "https://youtu.be/jtO2AUc_XgQ"
}
