{
  "title": "Remove Element",
  "slug": "remove-element",
  "leetcodeId": "#27",
  "category": ["Array", "Two Pointer"],
  "problemStatement": "You are given an array nums and an integer val. Your task is to remove all occurrences of val from the array in-place, and return the number of elements that are not equal to val. The modified array should have all the remaining (non-val) elements at the beginning. The rest of the elements don’t matter.\n\nReturn the count k, which is the number of elements not equal to val.",
  "examples": [
    {
      "input": "nums = [3,2,2,3], val = 3",
      "output": "2",
      "explanation": "Modified array: [2,2,_,_]. First 2 elements are not equal to 3."
    },
    {
      "input": "nums = [0,1,2,2,3,0,4,2], val = 2",
      "output": "5",
      "explanation": "Modified array: [0,1,3,0,4,_,_,_]. First 5 elements are not equal to 2."
    }
  ],
  "approach": "Approach 1:\nTwo Pointer (Swap Based)\n\n1. Initialize two pointers `first = 0` and `sec = 0`.\n2. Loop while `sec < nums.length`.\n3. If `nums[sec] !== val`, swap `nums[first]` and `nums[sec]`, and increment `first`.\n4. Always increment `sec`.\n\nApproach 2:\nCleaner Overwrite\n\n1. Initialize a pointer `k = 0`.\n2. Loop through each element in `nums`.\n3. If the element is not equal to `val`, overwrite `nums[k] = nums[i]`.\n4. Increment `k` after each overwrite.",
  "code": "// Approach 1: Two Pointer (Swap Based)\nvar removeElement = function(nums, val) {\n  let first = 0;\n  let sec = 0;\n\n  while (sec < nums.length) {\n    if (nums[sec] !== val) {\n      [nums[first], nums[sec]] = [nums[sec], nums[first]];\n      first++;\n    }\n    sec++;\n  }\n\n  console.log(nums.slice(0, first));\n  return first;\n};\n\nconsole.log(removeElement([3,2,2,3], 3)); // Output: 2\nconsole.log(removeElement([0,1,2,2,3,0,4,2], 2)); // Output: 5\n\n\n// Approach 2: Cleaner Overwrite\nvar removeElement = function(nums, val) {\n  let k = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== val) {\n      nums[k] = nums[i];\n      k++;\n    }\n  }\n\n  console.log(nums.slice(0, k));\n  return k;\n};\n\nconsole.log(removeElement([3,2,2,3], 3)); // Output: 2\nconsole.log(removeElement([0,1,2,2,3,0,4,2], 2)); // Output: 5",
  "timeComplexity": "O(n) – We iterate through the array once.",
  "spaceComplexity": "O(1) – Done in-place without extra space.",
  "leetcodeLink": "https://leetcode.com/problems/remove-element/",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQSRXTgg0kplQb5aYZCgf3ttAY5mnB0DFTGA42Wv-TR9B4k?em=2&amp;wdAr=1.7777777777777777",
  "videoLink": "i-d8csKVlGo"
}
