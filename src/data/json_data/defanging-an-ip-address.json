{
  "title": "Defanging an IP Address",
  "slug": "defanging-ip-address",
  "leetcodeId": "#1108",
  "category": ["String", "Foundation"],
  "problemStatement": "Given a valid (IPv4) IP address, return a defanged version of that IP address. A defanged IP address replaces every '.' with '[.]' to avoid accidental linking or execution in web contexts.",
  "examples": [
    {
      "input": "\"1.1.1.1\"",
      "output": "\"1[.]1[.]1[.]1\"",
      "explanation": "Each '.' is replaced with '[.]', so the result becomes '1[.]1[.]1[.]1'."
    },
    {
      "input": "\"255.100.50.0\"",
      "output": "\"255[.]100[.]50[.]0\"",
      "explanation": "All '.' characters in the IP are replaced with '[.]'."
    }
  ],
  "approach": [
    {
      "title": "Brute Force – Manual Character Iteration",
      "steps": [
        "Initialize an empty string `result`.",
        "Loop through each character in the given IP address.",
        "If the character is a '.', append '[.]' to the result.",
        "Otherwise, append the character itself.",
        "Return the final `result` string."
      ],
      "code": "var defangIPaddr = function(address) {\n  let result = \"\";\n  for (let char of address) {\n    if (char === \".\") {\n      result += \"[.]\";\n    } else {\n      result += char;\n    }\n  }\n  return result;\n};"
    },
    {
      "title": "Optimized – Using replaceAll()",
      "steps": [
        "Use JavaScript’s built-in `replaceAll()` method.",
        "Call `address.replaceAll('.', '[.]')` to directly replace all dots.",
        "Return the result."
      ],
      "code": "var defangIPaddr = function(address) {\n  return address.replaceAll(\".\", \"[.]\");\n};"
    }
  ],
  "timeComplexity": "O(n), where n is the length of the input string.",
  "spaceComplexity": "O(n), for the new string being returned.",
  "leetcodeLink": "https://leetcode.com/problems/defanging-an-ip-address/",
  "videoLink": "dFvS7X_mHv0"
}
