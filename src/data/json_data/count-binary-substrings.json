{
  "title": "Count Binary Substrings",
  "slug": "count-binary-substrings",
  "leetcodeId": "#696",
  "category": ["String", "Two Pointer"],
  "problemStatement": "You’re given a binary string. Your task is to count the number of substrings that:\n- Have equal number of 0s and 1s, and\n- All the 0s and all the 1s must be grouped together.\n\nNote: Repeated substrings are counted each time they occur.",
  "examples": [
    {
      "input": "00110011",
      "output": "6",
      "explanation": "Valid substrings are: 0011, 01, 1100, 10, 0011, 01. We care about both count and grouping."
    },
    {
      "input": "10101",
      "output": "4",
      "explanation": "Valid substrings are: 10, 01, 10, 01"
    }
  ],
  "approach": [
    {
      "title": "Brute Force",
      "steps": [
        "Generate all possible substrings of the binary string.",
        "For each substring, count the number of consecutive 0s and 1s.",
        "Check if the number of 0s and 1s are equal and grouped together (i.e., all 0s come first followed by all 1s, or vice versa).",
        "If valid, increment the result count.",
        "Return the total count of such valid substrings."
      ],
      "code": "// ❌ Inefficient brute-force approach not implemented due to O(n^2) complexity."
    },
    {
      "title": "Optimized Using Group Counts",
      "steps": [
        "Initialize a list `groups` to store counts of consecutive characters.",
        "Iterate through the string and count the length of consecutive 0s or 1s.",
        "Push each group count to the `groups` array.",
        "For every adjacent pair of groups, take the minimum of the two (because that’s the maximum number of valid substrings between them).",
        "Sum up all these minimums to get the final result.",
        "Return the result."
      ],
      "code": "var countBinarySubstrings = function(s) {\n  let groups = [];\n  let count = 1;\n\n  for (let i = 1; i < s.length; i++) {\n    if (s[i] === s[i - 1]) {\n      count++;\n    } else {\n      groups.push(count);\n      count = 1;\n    }\n  }\n  groups.push(count);\n\n  let result = 0;\n  for (let i = 1; i < groups.length; i++) {\n    result += Math.min(groups[i - 1], groups[i]);\n  }\n\n  return result;\n};"
    }
  ],
  "timeComplexity": "O(n) – One pass to count group sizes, one pass to compute result",
  "spaceComplexity": "O(n) – For storing the group sizes in an array",
  "leetcodeLink": "https://leetcode.com/problems/count-binary-substrings/",
  "videoLink": "dXcguydHR3E",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQTqErFs1Uz2QrbWWoNy6tUvAcONn2gOmngtnUWsllaHrxU?em=2&wdAr=1.7777777777777777"
}
