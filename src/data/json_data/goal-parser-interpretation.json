{
  "title": "Goal Parser Interpretation",
  "slug": "goal-parser-interpretation",
  "leetcodeId": "#1678",
  "category": ["String", "Foundation"],
  "problemStatement": "You are given a string `command`. The command string follows this format:\n\n- 'G' stands for the character G\n- '()' stands for the character o\n- '(al)' stands for the string 'al'\n\nYour task is to return the Goal Parser's interpretation of the command string.",
  "examples": [
    {
      "input": "\"G()(al)\"",
      "output": "\"Goal\"",
      "explanation": "'G' remains 'G', '()' becomes 'o', and '(al)' becomes 'al'."
    },
    {
      "input": "\"G()()()()(al)\"",
      "output": "\"Gooooal\"",
      "explanation": "Multiple '()' become multiple 'o', followed by '(al)' → 'al'."
    },
    {
      "input": "\"(al)G(al)()()G\"",
      "output": "\"alGalooG\"",
      "explanation": "Each '(al)' → 'al', '()' → 'o', and 'G' remains 'G'."
    }
  ],
  "approach": [
    {
      "title": "Brute Force (Using Loop)",
      "steps": [
        "Initialize an empty string `str`.",
        "Iterate through each character in the `command` string.",
        "If the character is `'G'`, append `'G'` to `str`.",
        "If you encounter `'('` and the next character is `')'`, append `'o'` to `str` and increment `i` by 1 to skip `')'`.",
        "Otherwise, append `'al'` to `str` and increment `i` by 3 to skip the full '(al)'.",
        "Return the final string `str`."
      ],
      "code": "var interpret = function(command) {\n  let str = \"\";\n  for (let i = 0; i < command.length; i++) {\n    if (command[i] === \"G\") {\n      str += \"G\";\n    } else if (command[i] === \"(\" && command[i + 1] === \")\") {\n      str += \"o\";\n      i++;\n    } else {\n      str += \"al\";\n      i += 3;\n    }\n  }\n  return str;\n};"
    },
    {
      "title": "Optimized (Using replaceAll)",
      "steps": [
        "Use `replaceAll()` method on the string to first replace all occurrences of `'()'` with `'o'`.",
        "Then replace all occurrences of `'(al)'` with `'al'`.",
        "Return the final modified string."
      ],
      "code": "var interpret = function(command) {\n  let str = command.replaceAll(\"()\", \"o\");\n  return str.replaceAll(\"(al)\", \"al\");\n};"
    }
  ],
  "timeComplexity": "O(n), where n is the length of the input string.",
  "spaceComplexity": "O(n), for the newly created interpreted string.",
  "leetcodeLink": "https://leetcode.com/problems/goal-parser-interpretation/",
  "videoLink": "dy5JV3Qf7Eo"
}
