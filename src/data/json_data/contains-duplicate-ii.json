{
  "title": "Contains Duplicate II",
  "slug": "contains-duplicate-ii",
  "leetcodeId": "#219",
  "category": ["Array", "Hash Set", "Sliding Window"],
  "problemStatement": "Given an integer array `nums` and an integer `k`, return `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.",
  "examples": [
    {
      "input": "nums = [1, 2, 3, 1], k = 3",
      "output": "true"
    },
    {
      "input": "nums = [1, 0, 1, 1], k = 1",
      "output": "true"
    },
    {
      "input": "nums = [1, 2, 3, 1, 2, 3], k = 2",
      "output": "false"
    }
  ],
  "approach": [
    {
      "title": "Brute Force",
      "steps": [
        "Iterate through each index `i` from `0` to `n - 1`.",
        "For each index `i`, check the next `k` elements (from `i+1` to `i+k`) to see if any are equal to `nums[i]`.",
        "If a duplicate is found within the range, return `true`.",
        "If no duplicates are found in any range, return `false`."
      ],
      "code": "var containsNearbyDuplicate = function(nums, k) {\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= i + k && j < nums.length; j++) {\n      if (nums[i] === nums[j]) return true;\n    }\n  }\n  return false;\n};"
    },
    {
      "title": "Sliding Window with Set",
      "steps": [
        "Initialize an empty Set to track the elements in the current window of size `k`.",
        "Iterate through the array `nums` using index `i`.",
        "If `nums[i]` is already in the Set, return `true` (duplicate within window found).",
        "Otherwise, add `nums[i]` to the Set.",
        "If the Set size exceeds `k`, remove the element at `i - k` from the Set (to maintain the window).",
        "If no duplicates are found by the end of the loop, return `false`."
      ],
      "code": "var containsNearbyDuplicate = function(nums, k) {\n  const set = new Set();\n  for (let i = 0; i < nums.length; i++) {\n    if (set.has(nums[i])) return true;\n    set.add(nums[i]);\n    if (set.size > k) {\n      set.delete(nums[i - k]);\n    }\n  }\n  return false;\n};"
    }
  ],
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(min(n, k))",
  "leetcodeLink": "https://leetcode.com/problems/contains-duplicate-ii/",
  "videoLink": "OPymJtzjlUM",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQR-8vKDzhNHQIK4fDSk0ZSTAd9PwFJ75-ubz2SG5sfa2uA?em=2&wdAr=1.7777777777777777"
}
