{
  "title": "Reverse String",
  "slug": "reverse-string",
  "leetcodeId": "#344",
  "category": ["String", "Two Pointer"],
  "problemStatement": "Write a function that reverses a character array in-place. You must do this by modifying the input array directly with O(1) extra memory.",
  "examples": [
    {
      "input": "[\"h\",\"e\",\"l\",\"l\",\"o\"]",
      "output": "[\"o\",\"l\",\"l\",\"e\",\"h\"]"
    },
    {
      "input": "[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]",
      "output": "[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]"
    }
  ],
  "approach": "Approach â€“ Two Pointer In-place:**\nWe solve this using the two-pointer approach. Initialize one pointer at the start (`left = 0`) and the other at the end (`right = s.length - 1`). Swap the characters at these positions and move the pointers toward each other until they meet. This approach reverses the array in-place without using extra space.\n\n**Note:** A brute force method using a new array is possible, but it violates the problem constraint of O(1) extra space.",
  "code": "// ðŸ”¹ Two Pointer In-place Reversal\nvar reverseString = function(s) {\n  let left = 0, right = s.length - 1;\n\n  while (left < right) {\n    [s[left], s[right]] = [s[right], s[left]]; // Swap using destructuring\n    left++;\n    right--;\n  }\n};",
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)",
  "leetcodeLink": "https://leetcode.com/problems/reverse-string/",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQRadyARq_8tQ709crU_s6lhAT7zIdmc3G6DZMQo-gHIvS0?em=2&amp;wdAr=1.7777777777777777",
  "videoLink": "sIMh93UP4aQ"
}
