{
  "title": "Two Sum",
  "slug": "two-sum",
  "leetcodeId": "#1",
  "category": ["Array", "Hash Map", "Foundation"],
  "problemStatement": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
  "examples": [
    {
      "input": "nums = [2, 7, 11, 15], target = 9",
      "output": "[0, 1]",
      "explanation": "Because nums[0] + nums[1] == 9."
    }
  ],
  "approach": [
    {
      "title": "Approach 1: Brute Force",
      "steps": [
        "Loop through each element in the array.",
        "For every element, subtract it from the target.",
        "Search the remainder in the rest of the array using another loop.",
        "If found, return the indices."
      ],
      "code": "// ðŸ”¹ Approach 1: Brute Force\nvar twoSum = function(nums, target) {\n  for (let i = 0; i < nums.length; i++) {\n    let diff = target - nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] === diff) {\n        return [i, j];\n      }\n    }\n  }\n};"
    },
    {
      "title": "Approach 2: Optimal using Hash Map",
      "steps": [
        "Initialize a hash map to store each element's value and its index.",
        "Loop through the array.",
        "For each number, calculate the complement: `target - current number`.",
        "Check if the complement exists in the map.",
        "If yes, return the stored index and current index.",
        "Otherwise, add the current number and index to the map."
      ],
      "code": "// ðŸ”¹ Approach 2: Optimal using Hash Map\nvar twoSum = function(nums, target) {\n  const map = new Map();\n\n  for (let i = 0; i < nums.length; i++) {\n    const complement = target - nums[i];\n    if (map.has(complement)) {\n      return [map.get(complement), i];\n    }\n    map.set(nums[i], i);\n  }\n};"
    }
  ],
  "timeComplexity": "O(n) for optimal approach (hash map); O(nÂ²) for brute force",
  "spaceComplexity": "O(n) â€“ for hash map; O(1) for brute force",
  "leetcodeLink": "https://leetcode.com/problems/two-sum/",
  "videoLink": "xBH-SzuhJ1c"
}
