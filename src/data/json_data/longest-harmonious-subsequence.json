{
  "title": "Longest Harmonious Subsequence",
  "slug": "longest-harmonious-subsequence",
  "leetcodeId": "#594",
  "category": [
    "Array",
    "Hash Map",
    "Sliding Window",
    "Sorting",
    "Frequency Count",
    "Two Pointer"
  ],
  "problemStatement": "We define a harmonious array as one where the difference between the maximum and minimum element is exactly 1. Given an array `nums`, return the length of the longest harmonious subsequence you can find. A subsequence can be formed by deleting some or no elements without changing the order of the remaining elements.",
  "examples": [
    {
      "input": "nums = [1, 3, 2, 2, 5, 2, 3, 7]",
      "output": "5",
      "explanation": "The subsequence [2, 2, 2, 3, 3] is the longest harmonious subsequence."
    },
    {
      "input": "nums = [1, 2, 3, 4]",
      "output": "2",
      "explanation": "Both [1, 2] and [2, 3] are valid, so the max is 2."
    },
    {
      "input": "nums = [1, 1, 1, 1]",
      "output": "0",
      "explanation": "No other number to pair with 1, so output is 0."
    }
  ],
  "approach": [
    {
      "title": "Sliding Window (Brute Force)",
      "steps": [
        "Sort the array in ascending order.",
        "Initialize two pointers: `start = 0` and `end = 0`.",
        "Iterate through the array with `end` pointer.",
        "While the difference between `nums[end]` and `nums[start]` is greater than 1, move `start` forward.",
        "If the difference is exactly 1, calculate the window length as `end - start + 1` and update the maximum length found so far.",
        "Return the maximum length after the loop ends."
      ],
      "code": "var findLHS = function(nums) {\n  nums.sort((a, b) => a - b);\n  let start = 0, maxLen = 0;\n  for (let end = 0; end < nums.length; end++) {\n    while (nums[end] - nums[start] > 1) {\n      start++;\n    }\n    if (nums[end] - nums[start] === 1) {\n      maxLen = Math.max(maxLen, end - start + 1);\n    }\n  }\n  return maxLen;\n};"
    },
    {
      "title": "Optimized (Using Hash Map)",
      "steps": [
        "Create a HashMap to count the frequency of each element in the array.",
        "Loop through each key in the HashMap.",
        "For each key, check if `key + 1` exists in the HashMap.",
        "If yes, add the counts of `key` and `key + 1`, and update the maximum length.",
        "Return the maximum length found."
      ],
      "code": "var findLHS = function(nums) {\n  const map = new Map();\n  for (let num of nums) {\n    map.set(num, (map.get(num) || 0) + 1);\n  }\n  let maxLen = 0;\n  for (let [num, count] of map.entries()) {\n    if (map.has(num + 1)) {\n      maxLen = Math.max(maxLen, count + map.get(num + 1));\n    }\n  }\n  return maxLen;\n};"
    }
  ],
  "timeComplexity": "Brute Force: O(n log n) due to sorting. Optimized: O(n) using hash map.",
  "spaceComplexity": "Brute Force: O(1) or O(n) (depends on sort). Optimized: O(n) for the frequency map.",
  "leetcodeLink": "https://leetcode.com/problems/longest-harmonious-subsequence/",
  "pptLink": "https://1drv.ms/p/c/d9a1d5f2dacf7aea/IQRiCaf_x8_GTLdrRpBXXLO_ARt9S5TYhQweBDxnCpim570?em=2&wdAr=1.7777777777777777",
  "videoLink": "oA9UBaWCL5I"
}
